@using Umbraco.Cms.Core.Models
@inherits UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem<ContentModels.CallToAction>>

@{
    const int TITLE_AREA = 0;
    const int CONTENT_AREA = 1;
    const int LINK_AREA = 2;

    // Get the image position setting (default to "left" if not set)
    var imagePosition = Model.Content.Value<string>("picturePlacement", fallback: Fallback.ToDefaultValue, defaultValue: "right");
    var image = Model.Content.Value<MediaWithCrops>("image");
}

<!-- CTA Section -->
<section class="page-section bg-gradient bg-success text-white mb-0" id="about">
    <div class="container">
        @if (image == null)
        {
            <!-- Original layout when no image is selected -->
            <div class="text-white">
                @await Html.GetBlockGridItemAreaHtmlAsync(Model.Areas.ElementAt(TITLE_AREA))
            </div>
            <div class="row">
                @{
                    var contentArea = Model.Areas.ElementAt(CONTENT_AREA);
                    if (contentArea != null && contentArea.Any())
                    {
                        var classToApply = "";
                        var itemCount = contentArea.Count;
                        var i = 0;
                        foreach (var item in contentArea)
                        {
                            if (itemCount > 1)
                            {
                                if (itemCount > 1 && i % 2 == 1)
                                {
                                    classToApply = "me-auto";
                                }
                                else
                                {
                                    classToApply = "ms-auto";
                                }
                            }
                            else
                            {
                                classToApply = "mx-auto";
                            }

                            <div class="col-lg-@item.ColumnSpan @(classToApply)">
                                @await Html.PartialAsync("blockgrid/Components/richText", item)
                            </div>
                            i++;
                        }
                    }
                }
            </div>
        }
        else
        {
            <!-- Title (Full Width Above) -->
            <div class="col-12 text-white mb-4">
                @await Html.GetBlockGridItemAreaHtmlAsync(Model.Areas.ElementAt(TITLE_AREA))
            </div>

            <!-- Image & Content (50/50 Split Below Title) -->
            <div class="row align-items-center">
                @if (imagePosition == "left")
                {
                    <!-- Image Left -->
                    <div class="col-lg-6 mb-4 mb-lg-0">
                        <img class="img-fluid w-75 h-75 lazyload rounded"
                             data-srcset="@Url.GetSrcSetUrls(Model.Content.Image, 400, 290)"
                             src="@Model.Content.Image.GetCropUrl(40,29)"
                             alt="@Model.Content.Image.GetAltText()"
                             style="object-fit: cover;">
                    </div>
                    <div class="col-lg-6">
                        @{
                            var contentArea = Model.Areas.ElementAt(CONTENT_AREA);
                            if (contentArea != null && contentArea.Any())
                            {
                                foreach (var item in contentArea)
                                {
                                    <div class="mb-4">
                                        @await Html.PartialAsync("blockgrid/Components/richText", item)
                                    </div>
                                }
                            }
                        }
                    </div>
                }
                else
                {
                    <!-- Image Right -->
                    <div class="col-lg-6 order-lg-2 mb-4 mb-lg-0">
                        <img class="img-fluid w-75 h-75 lazyload rounded"
                             data-srcset="@Url.GetSrcSetUrls(Model.Content.Image, 400, 290)"
                             src="@Model.Content.Image.GetCropUrl(40,29)"
                             alt="@Model.Content.Image.GetAltText()"
                             style="object-fit: cover;">
                    </div>
                    <div class="col-lg-6 order-lg-1">
                        @{
                            var contentArea = Model.Areas.ElementAt(CONTENT_AREA);
                            if (contentArea != null && contentArea.Any())
                            {
                                foreach (var item in contentArea)
                                {
                                    <div class="mb-4">
                                        @await Html.PartialAsync("blockgrid/Components/richText", item)
                                    </div>
                                }
                            }
                        }
                    </div>
                }
            </div>
        }

        <!-- Link Area (same for both layouts) -->
        @{
            var linkArea = Model.Areas.ElementAt(LINK_AREA);
        }

        @if (linkArea is not null && linkArea.Any())
        {
            <div class="text-center mt-4">
                @foreach (var item in linkArea)
                {
                    var iconLink = item.Content as IconLink;
                    if (iconLink is not null)
                    {
                        <a class="btn btn-xl btn-outline-light" href="@iconLink.Link.Url" target="@iconLink.Link.Target">
                            <span class="icon-link">
                                <our-svg media-item="iconLink.Icon" class="svg-inline--fa fa-fw text-white"></our-svg>
                            </span>
                            @iconLink.Link.Name
                        </a>
                    }
                }
            </div>
        }
    </div>
</section>